
stm32f4_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d9c  08001d9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d9c  08001d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001da4  08001da4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001da8  08001da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08001db8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08001db8  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007801  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000145f  00000000  00000000  0002783d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  00028ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000748  00000000  00000000  00029490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000153c  00000000  00000000  00029bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006301  00000000  00000000  0002b114  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086369  00000000  00000000  00031415  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b777e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000b77fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001d6c 	.word	0x08001d6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001d6c 	.word	0x08001d6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f915 	bl	8000730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f810 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f000 f806 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f917 	bl	800077e <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f8ed 	bl	8000746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006fc:	d301      	bcc.n	8000702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fe:	2301      	movs	r3, #1
 8000700:	e00f      	b.n	8000722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <SysTick_Config+0x40>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070a:	210f      	movs	r1, #15
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f7ff ff8e 	bl	8000630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <SysTick_Config+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <SysTick_Config+0x40>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff47 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000746:	b580      	push	{r7, lr}
 8000748:	b086      	sub	sp, #24
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000758:	f7ff ff5c 	bl	8000614 <__NVIC_GetPriorityGrouping>
 800075c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f7ff ff8e 	bl	8000684 <NVIC_EncodePriority>
 8000768:	4602      	mov	r2, r0
 800076a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff5d 	bl	8000630 <__NVIC_SetPriority>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ffb0 	bl	80006ec <SysTick_Config>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	e159      	b.n	8000a68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b4:	2201      	movs	r2, #1
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	f040 8148 	bne.w	8000a62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d003      	beq.n	80007e2 <HAL_GPIO_Init+0x4a>
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b12      	cmp	r3, #18
 80007e0:	d123      	bne.n	800082a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	08da      	lsrs	r2, r3, #3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3208      	adds	r2, #8
 80007ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	220f      	movs	r2, #15
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	4013      	ands	r3, r2
 8000804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	691a      	ldr	r2, [r3, #16]
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	f003 0307 	and.w	r3, r3, #7
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4313      	orrs	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	08da      	lsrs	r2, r3, #3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3208      	adds	r2, #8
 8000824:	69b9      	ldr	r1, [r7, #24]
 8000826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	2203      	movs	r2, #3
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4013      	ands	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0203 	and.w	r2, r3, #3
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d00b      	beq.n	800087e <HAL_GPIO_Init+0xe6>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d007      	beq.n	800087e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	2b11      	cmp	r3, #17
 8000874:	d003      	beq.n	800087e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d130      	bne.n	80008e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68da      	ldr	r2, [r3, #12]
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	f003 0201 	and.w	r2, r3, #1
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	2b00      	cmp	r3, #0
 800091a:	f000 80a2 	beq.w	8000a62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b56      	ldr	r3, [pc, #344]	; (8000a7c <HAL_GPIO_Init+0x2e4>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a55      	ldr	r2, [pc, #340]	; (8000a7c <HAL_GPIO_Init+0x2e4>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <HAL_GPIO_Init+0x2e4>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800093a:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <HAL_GPIO_Init+0x2e8>)
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3302      	adds	r3, #2
 8000942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	220f      	movs	r2, #15
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4013      	ands	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <HAL_GPIO_Init+0x2ec>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x202>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a47      	ldr	r2, [pc, #284]	; (8000a88 <HAL_GPIO_Init+0x2f0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x1fe>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <HAL_GPIO_Init+0x2f4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x1fa>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <HAL_GPIO_Init+0x2f8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x1f6>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a44      	ldr	r2, [pc, #272]	; (8000a94 <HAL_GPIO_Init+0x2fc>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x1f2>
 8000986:	2304      	movs	r3, #4
 8000988:	e008      	b.n	800099c <HAL_GPIO_Init+0x204>
 800098a:	2307      	movs	r3, #7
 800098c:	e006      	b.n	800099c <HAL_GPIO_Init+0x204>
 800098e:	2303      	movs	r3, #3
 8000990:	e004      	b.n	800099c <HAL_GPIO_Init+0x204>
 8000992:	2302      	movs	r3, #2
 8000994:	e002      	b.n	800099c <HAL_GPIO_Init+0x204>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <HAL_GPIO_Init+0x204>
 800099a:	2300      	movs	r3, #0
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	f002 0203 	and.w	r2, r2, #3
 80009a2:	0092      	lsls	r2, r2, #2
 80009a4:	4093      	lsls	r3, r2
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009ac:	4934      	ldr	r1, [pc, #208]	; (8000a80 <HAL_GPIO_Init+0x2e8>)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ba:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <HAL_GPIO_Init+0x300>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <HAL_GPIO_Init+0x300>)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <HAL_GPIO_Init+0x300>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a08:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_GPIO_Init+0x300>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	f67f aea2 	bls.w	80007b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a70:	bf00      	nop
 8000a72:	3724      	adds	r7, #36	; 0x24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40013800 	.word	0x40013800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40013c00 	.word	0x40013c00

08000a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e22d      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d075      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aba:	4ba3      	ldr	r3, [pc, #652]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d00c      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ac6:	4ba0      	ldr	r3, [pc, #640]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d112      	bne.n	8000af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ad2:	4b9d      	ldr	r3, [pc, #628]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ade:	d10b      	bne.n	8000af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae0:	4b99      	ldr	r3, [pc, #612]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d05b      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x108>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d157      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e208      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b00:	d106      	bne.n	8000b10 <HAL_RCC_OscConfig+0x74>
 8000b02:	4b91      	ldr	r3, [pc, #580]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a90      	ldr	r2, [pc, #576]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e01d      	b.n	8000b4c <HAL_RCC_OscConfig+0xb0>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b18:	d10c      	bne.n	8000b34 <HAL_RCC_OscConfig+0x98>
 8000b1a:	4b8b      	ldr	r3, [pc, #556]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a8a      	ldr	r2, [pc, #552]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b88      	ldr	r3, [pc, #544]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a87      	ldr	r2, [pc, #540]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e00b      	b.n	8000b4c <HAL_RCC_OscConfig+0xb0>
 8000b34:	4b84      	ldr	r3, [pc, #528]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a83      	ldr	r2, [pc, #524]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b81      	ldr	r3, [pc, #516]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a80      	ldr	r2, [pc, #512]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b54:	f7ff fd2e 	bl	80005b4 <HAL_GetTick>
 8000b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5a:	e008      	b.n	8000b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fd2a 	bl	80005b4 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b64      	cmp	r3, #100	; 0x64
 8000b68:	d901      	bls.n	8000b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e1cd      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	4b76      	ldr	r3, [pc, #472]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f0      	beq.n	8000b5c <HAL_RCC_OscConfig+0xc0>
 8000b7a:	e014      	b.n	8000ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fd1a 	bl	80005b4 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fd16 	bl	80005b4 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1b9      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0xe8>
 8000ba2:	e000      	b.n	8000ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d063      	beq.n	8000c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bb2:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bbe:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d11c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bca:	4b5f      	ldr	r3, [pc, #380]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d116      	bne.n	8000c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd6:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d005      	beq.n	8000bee <HAL_RCC_OscConfig+0x152>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d001      	beq.n	8000bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e18d      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bee:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4952      	ldr	r1, [pc, #328]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c02:	e03a      	b.n	8000c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d020      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <HAL_RCC_OscConfig+0x2b0>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c12:	f7ff fccf 	bl	80005b4 <HAL_GetTick>
 8000c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c18:	e008      	b.n	8000c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1a:	f7ff fccb 	bl	80005b4 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d901      	bls.n	8000c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e16e      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f0      	beq.n	8000c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c38:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4940      	ldr	r1, [pc, #256]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
 8000c4c:	e015      	b.n	8000c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c4e:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <HAL_RCC_OscConfig+0x2b0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c54:	f7ff fcae 	bl	80005b4 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fcaa 	bl	80005b4 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e14d      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d030      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d016      	beq.n	8000cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_RCC_OscConfig+0x2b4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c94:	f7ff fc8e 	bl	80005b4 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc8a 	bl	80005b4 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e12d      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x200>
 8000cba:	e015      	b.n	8000ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_RCC_OscConfig+0x2b4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fc77 	bl	80005b4 <HAL_GetTick>
 8000cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cca:	f7ff fc73 	bl	80005b4 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e116      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f0      	bne.n	8000cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80a0 	beq.w	8000e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10f      	bne.n	8000d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_RCC_OscConfig+0x2b8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d121      	bne.n	8000d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_RCC_OscConfig+0x2b8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_RCC_OscConfig+0x2b8>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fc39 	bl	80005b4 <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d44:	e011      	b.n	8000d6a <HAL_RCC_OscConfig+0x2ce>
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	42470000 	.word	0x42470000
 8000d50:	42470e80 	.word	0x42470e80
 8000d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d58:	f7ff fc2c 	bl	80005b4 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e0cf      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <HAL_RCC_OscConfig+0x478>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d106      	bne.n	8000d8c <HAL_RCC_OscConfig+0x2f0>
 8000d7e:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d82:	4a65      	ldr	r2, [pc, #404]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6713      	str	r3, [r2, #112]	; 0x70
 8000d8a:	e01c      	b.n	8000dc6 <HAL_RCC_OscConfig+0x32a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2b05      	cmp	r3, #5
 8000d92:	d10c      	bne.n	8000dae <HAL_RCC_OscConfig+0x312>
 8000d94:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d98:	4a5f      	ldr	r2, [pc, #380]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000da0:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da4:	4a5c      	ldr	r2, [pc, #368]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6713      	str	r3, [r2, #112]	; 0x70
 8000dac:	e00b      	b.n	8000dc6 <HAL_RCC_OscConfig+0x32a>
 8000dae:	4b5a      	ldr	r3, [pc, #360]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db2:	4a59      	ldr	r2, [pc, #356]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6713      	str	r3, [r2, #112]	; 0x70
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dbe:	4a56      	ldr	r2, [pc, #344]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d015      	beq.n	8000dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dce:	f7ff fbf1 	bl	80005b4 <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd4:	e00a      	b.n	8000dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fbed 	bl	80005b4 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e08e      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dec:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0ee      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x33a>
 8000df8:	e014      	b.n	8000e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fbdb 	bl	80005b4 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e00:	e00a      	b.n	8000e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e02:	f7ff fbd7 	bl	80005b4 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e078      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1ee      	bne.n	8000e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d105      	bne.n	8000e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a3a      	ldr	r2, [pc, #232]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d064      	beq.n	8000f08 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d05c      	beq.n	8000f04 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d141      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_RCC_OscConfig+0x480>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fbac 	bl	80005b4 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fba8 	bl	80005b4 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e04b      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69da      	ldr	r2, [r3, #28]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	3b01      	subs	r3, #1
 8000e98:	041b      	lsls	r3, r3, #16
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	061b      	lsls	r3, r3, #24
 8000ea2:	491d      	ldr	r1, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_RCC_OscConfig+0x480>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fb81 	bl	80005b4 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fb7d 	bl	80005b4 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e020      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x41a>
 8000ed4:	e018      	b.n	8000f08 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_RCC_OscConfig+0x480>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fb6a 	bl	80005b4 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee4:	f7ff fb66 	bl	80005b4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e009      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_RCC_OscConfig+0x47c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x448>
 8000f02:	e001      	b.n	8000f08 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	42470060 	.word	0x42470060

08000f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0ca      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f34:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d90c      	bls.n	8000f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4a:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0b6      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d020      	beq.n	8000faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f8c:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	494c      	ldr	r1, [pc, #304]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d044      	beq.n	8001040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e07d      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d003      	beq.n	8000fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e06d      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e065      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f023 0203 	bic.w	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4933      	ldr	r1, [pc, #204]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 800100c:	4313      	orrs	r3, r2
 800100e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001010:	f7ff fad0 	bl	80005b4 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	e00a      	b.n	800102e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001018:	f7ff facc 	bl	80005b4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d901      	bls.n	800102e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e04d      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 020c 	and.w	r2, r3, #12
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	429a      	cmp	r2, r3
 800103e:	d1eb      	bne.n	8001018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d20c      	bcs.n	8001068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_ClockConfig+0x1b4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e030      	b.n	80010ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4915      	ldr	r1, [pc, #84]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001082:	4313      	orrs	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	490d      	ldr	r1, [pc, #52]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a6:	f000 f81d 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80010aa:	4601      	mov	r1, r0
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x1b8>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fa32 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	08001d84 	.word	0x08001d84
 80010e0:	20000008 	.word	0x20000008

080010e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010fa:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b04      	cmp	r3, #4
 8001104:	d007      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0x32>
 8001106:	2b08      	cmp	r3, #8
 8001108:	d008      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0x38>
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 808d 	bne.w	800122a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001112:	60bb      	str	r3, [r7, #8]
       break;
 8001114:	e08c      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001116:	4b4b      	ldr	r3, [pc, #300]	; (8001244 <HAL_RCC_GetSysClockFreq+0x160>)
 8001118:	60bb      	str	r3, [r7, #8]
      break;
 800111a:	e089      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001124:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d023      	beq.n	800117a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	099b      	lsrs	r3, r3, #6
 8001138:	f04f 0400 	mov.w	r4, #0
 800113c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	ea03 0501 	and.w	r5, r3, r1
 8001148:	ea04 0602 	and.w	r6, r4, r2
 800114c:	4a3d      	ldr	r2, [pc, #244]	; (8001244 <HAL_RCC_GetSysClockFreq+0x160>)
 800114e:	fb02 f106 	mul.w	r1, r2, r6
 8001152:	2200      	movs	r2, #0
 8001154:	fb02 f205 	mul.w	r2, r2, r5
 8001158:	440a      	add	r2, r1
 800115a:	493a      	ldr	r1, [pc, #232]	; (8001244 <HAL_RCC_GetSysClockFreq+0x160>)
 800115c:	fba5 0101 	umull	r0, r1, r5, r1
 8001160:	1853      	adds	r3, r2, r1
 8001162:	4619      	mov	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0400 	mov.w	r4, #0
 800116a:	461a      	mov	r2, r3
 800116c:	4623      	mov	r3, r4
 800116e:	f7ff f833 	bl	80001d8 <__aeabi_uldivmod>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e049      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	099b      	lsrs	r3, r3, #6
 8001180:	f04f 0400 	mov.w	r4, #0
 8001184:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	ea03 0501 	and.w	r5, r3, r1
 8001190:	ea04 0602 	and.w	r6, r4, r2
 8001194:	4629      	mov	r1, r5
 8001196:	4632      	mov	r2, r6
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	f04f 0400 	mov.w	r4, #0
 80011a0:	0154      	lsls	r4, r2, #5
 80011a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011a6:	014b      	lsls	r3, r1, #5
 80011a8:	4619      	mov	r1, r3
 80011aa:	4622      	mov	r2, r4
 80011ac:	1b49      	subs	r1, r1, r5
 80011ae:	eb62 0206 	sbc.w	r2, r2, r6
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	f04f 0400 	mov.w	r4, #0
 80011ba:	0194      	lsls	r4, r2, #6
 80011bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011c0:	018b      	lsls	r3, r1, #6
 80011c2:	1a5b      	subs	r3, r3, r1
 80011c4:	eb64 0402 	sbc.w	r4, r4, r2
 80011c8:	f04f 0100 	mov.w	r1, #0
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	00e2      	lsls	r2, r4, #3
 80011d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011d6:	00d9      	lsls	r1, r3, #3
 80011d8:	460b      	mov	r3, r1
 80011da:	4614      	mov	r4, r2
 80011dc:	195b      	adds	r3, r3, r5
 80011de:	eb44 0406 	adc.w	r4, r4, r6
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	02a2      	lsls	r2, r4, #10
 80011ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80011f0:	0299      	lsls	r1, r3, #10
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f04f 0400 	mov.w	r4, #0
 8001200:	461a      	mov	r2, r3
 8001202:	4623      	mov	r3, r4
 8001204:	f7fe ffe8 	bl	80001d8 <__aeabi_uldivmod>
 8001208:	4603      	mov	r3, r0
 800120a:	460c      	mov	r4, r1
 800120c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_GetSysClockFreq+0x158>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	0c1b      	lsrs	r3, r3, #16
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	3301      	adds	r3, #1
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	60bb      	str	r3, [r7, #8]
      break;
 8001228:	e002      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_RCC_GetSysClockFreq+0x15c>)
 800122c:	60bb      	str	r3, [r7, #8]
      break;
 800122e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001230:	68bb      	ldr	r3, [r7, #8]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	00f42400 	.word	0x00f42400
 8001244:	017d7840 	.word	0x017d7840

08001248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_RCC_GetHCLKFreq+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001264:	f7ff fff0 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 8001268:	4601      	mov	r1, r0
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	0a9b      	lsrs	r3, r3, #10
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	08001d94 	.word	0x08001d94

08001288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800128c:	f7ff ffdc 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 8001290:	4601      	mov	r1, r0
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	0b5b      	lsrs	r3, r3, #13
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	08001d94 	.word	0x08001d94

080012b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e056      	b.n	8001370 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f84b 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	ea42 0103 	orr.w	r1, r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	f003 0104 	and.w	r1, r3, #4
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800135e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e03f      	b.n	800141e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fc20 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2224      	movs	r2, #36	; 0x24
 80013bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f829 	bl	8001428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2220      	movs	r2, #32
 8001410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001468:	f023 030c 	bic.w	r3, r3, #12
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	430b      	orrs	r3, r1
 8001474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001494:	f040 80e4 	bne.w	8001660 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4aab      	ldr	r2, [pc, #684]	; (800174c <UART_SetConfig+0x324>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d004      	beq.n	80014ac <UART_SetConfig+0x84>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4aaa      	ldr	r2, [pc, #680]	; (8001750 <UART_SetConfig+0x328>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d16c      	bne.n	8001586 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014ac:	f7ff feec 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	441a      	add	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4aa3      	ldr	r2, [pc, #652]	; (8001754 <UART_SetConfig+0x32c>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	011c      	lsls	r4, r3, #4
 80014d0:	f7ff feda 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	009a      	lsls	r2, r3, #2
 80014de:	441a      	add	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80014ea:	f7ff fecd 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009a      	lsls	r2, r3, #2
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	4a93      	ldr	r2, [pc, #588]	; (8001754 <UART_SetConfig+0x32c>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2264      	movs	r2, #100	; 0x64
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	1aeb      	subs	r3, r5, r3
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	3332      	adds	r3, #50	; 0x32
 8001518:	4a8e      	ldr	r2, [pc, #568]	; (8001754 <UART_SetConfig+0x32c>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001526:	441c      	add	r4, r3
 8001528:	f7ff feae 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 800152c:	4602      	mov	r2, r0
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	009a      	lsls	r2, r3, #2
 8001536:	441a      	add	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fbb2 f5f3 	udiv	r5, r2, r3
 8001542:	f7ff fea1 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001546:	4602      	mov	r2, r0
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009a      	lsls	r2, r3, #2
 8001550:	441a      	add	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	4a7d      	ldr	r2, [pc, #500]	; (8001754 <UART_SetConfig+0x32c>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2264      	movs	r2, #100	; 0x64
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	1aeb      	subs	r3, r5, r3
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	3332      	adds	r3, #50	; 0x32
 8001570:	4a78      	ldr	r2, [pc, #480]	; (8001754 <UART_SetConfig+0x32c>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4422      	add	r2, r4
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e154      	b.n	8001830 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001586:	f7ff fe6b 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 800158a:	4602      	mov	r2, r0
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009a      	lsls	r2, r3, #2
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <UART_SetConfig+0x32c>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	011c      	lsls	r4, r3, #4
 80015aa:	f7ff fe59 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	009a      	lsls	r2, r3, #2
 80015b8:	441a      	add	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80015c4:	f7ff fe4c 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	441a      	add	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4a5d      	ldr	r2, [pc, #372]	; (8001754 <UART_SetConfig+0x32c>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	2264      	movs	r2, #100	; 0x64
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	1aeb      	subs	r3, r5, r3
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	3332      	adds	r3, #50	; 0x32
 80015f2:	4a58      	ldr	r2, [pc, #352]	; (8001754 <UART_SetConfig+0x32c>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001600:	441c      	add	r4, r3
 8001602:	f7ff fe2d 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8001606:	4602      	mov	r2, r0
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009a      	lsls	r2, r3, #2
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fbb2 f5f3 	udiv	r5, r2, r3
 800161c:	f7ff fe20 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8001620:	4602      	mov	r2, r0
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	009a      	lsls	r2, r3, #2
 800162a:	441a      	add	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4a47      	ldr	r2, [pc, #284]	; (8001754 <UART_SetConfig+0x32c>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	2264      	movs	r2, #100	; 0x64
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	1aeb      	subs	r3, r5, r3
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	3332      	adds	r3, #50	; 0x32
 800164a:	4a42      	ldr	r2, [pc, #264]	; (8001754 <UART_SetConfig+0x32c>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	f003 0207 	and.w	r2, r3, #7
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4422      	add	r2, r4
 800165c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800165e:	e0e7      	b.n	8001830 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a39      	ldr	r2, [pc, #228]	; (800174c <UART_SetConfig+0x324>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d004      	beq.n	8001674 <UART_SetConfig+0x24c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a38      	ldr	r2, [pc, #224]	; (8001750 <UART_SetConfig+0x328>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d171      	bne.n	8001758 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001674:	f7ff fe08 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001678:	4602      	mov	r2, r0
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	009a      	lsls	r2, r3, #2
 8001682:	441a      	add	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4a31      	ldr	r2, [pc, #196]	; (8001754 <UART_SetConfig+0x32c>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	095b      	lsrs	r3, r3, #5
 8001696:	011c      	lsls	r4, r3, #4
 8001698:	f7ff fdf6 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 800169c:	4602      	mov	r2, r0
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009a      	lsls	r2, r3, #2
 80016a6:	441a      	add	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80016b2:	f7ff fde9 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	009a      	lsls	r2, r3, #2
 80016c0:	441a      	add	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <UART_SetConfig+0x32c>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2264      	movs	r2, #100	; 0x64
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	1aeb      	subs	r3, r5, r3
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	3332      	adds	r3, #50	; 0x32
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <UART_SetConfig+0x32c>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	441c      	add	r4, r3
 80016ee:	f7ff fdcb 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	009a      	lsls	r2, r3, #2
 80016fc:	441a      	add	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fbb2 f5f3 	udiv	r5, r2, r3
 8001708:	f7ff fdbe 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 800170c:	4602      	mov	r2, r0
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	441a      	add	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <UART_SetConfig+0x32c>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	2264      	movs	r2, #100	; 0x64
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	1aeb      	subs	r3, r5, r3
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	3332      	adds	r3, #50	; 0x32
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <UART_SetConfig+0x32c>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	f003 020f 	and.w	r2, r3, #15
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4422      	add	r2, r4
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	e071      	b.n	8001830 <UART_SetConfig+0x408>
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001758:	f7ff fd82 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 800175c:	4602      	mov	r2, r0
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009a      	lsls	r2, r3, #2
 8001766:	441a      	add	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <UART_SetConfig+0x410>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	011c      	lsls	r4, r3, #4
 800177c:	f7ff fd70 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8001780:	4602      	mov	r2, r0
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009a      	lsls	r2, r3, #2
 800178a:	441a      	add	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	fbb2 f5f3 	udiv	r5, r2, r3
 8001796:	f7ff fd63 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 800179a:	4602      	mov	r2, r0
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <UART_SetConfig+0x410>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2264      	movs	r2, #100	; 0x64
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	1aeb      	subs	r3, r5, r3
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	3332      	adds	r3, #50	; 0x32
 80017c4:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <UART_SetConfig+0x410>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	441c      	add	r4, r3
 80017d2:	f7ff fd45 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	009a      	lsls	r2, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80017ec:	f7ff fd38 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	009a      	lsls	r2, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <UART_SetConfig+0x410>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	2264      	movs	r2, #100	; 0x64
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	1aeb      	subs	r3, r5, r3
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	3332      	adds	r3, #50	; 0x32
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <UART_SetConfig+0x410>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	f003 020f 	and.w	r2, r3, #15
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4422      	add	r2, r4
 800182c:	609a      	str	r2, [r3, #8]
}
 800182e:	e7ff      	b.n	8001830 <UART_SetConfig+0x408>
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bdb0      	pop	{r4, r5, r7, pc}
 8001838:	51eb851f 	.word	0x51eb851f

0800183c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001840:	f7fe fe4a 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001844:	f000 f80c 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001848:	f000 f934 	bl	8001ab4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800184c:	f000 f866 	bl	800191c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001850:	f000 f89a 	bl	8001988 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001854:	f000 f8ce 	bl	80019f4 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001858:	f000 f902 	bl	8001a60 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800185c:	e7fe      	b.n	800185c <main+0x20>
	...

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	; 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2230      	movs	r2, #48	; 0x30
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fa74 	bl	8001d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <SystemClock_Config+0xb4>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <SystemClock_Config+0xb4>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <SystemClock_Config+0xb4>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <SystemClock_Config+0xb8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <SystemClock_Config+0xb8>)
 80018aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <SystemClock_Config+0xb8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c4:	2310      	movs	r3, #16
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f8e3 	bl	8000a9c <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80018dc:	f000 f920 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e0:	230f      	movs	r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb10 	bl	8000f20 <HAL_RCC_ClockConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001906:	f000 f90b 	bl	8001b20 <Error_Handler>
  }
}
 800190a:	bf00      	nop
 800190c:	3750      	adds	r7, #80	; 0x50
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000

0800191c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_SPI1_Init+0x64>)
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <MX_SPI1_Init+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_SPI1_Init+0x64>)
 8001928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800192c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_SPI1_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_SPI1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_SPI1_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_SPI1_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_SPI1_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_SPI1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_SPI1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_SPI1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_SPI1_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_SPI1_Init+0x64>)
 8001966:	220a      	movs	r2, #10
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_SPI1_Init+0x64>)
 800196c:	f7ff fca0 	bl	80012b0 <HAL_SPI_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8001976:	f000 f8d3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000dc 	.word	0x200000dc
 8001984:	40013000 	.word	0x40013000

08001988 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_SPI2_Init+0x64>)
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <MX_SPI2_Init+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_SPI2_Init+0x64>)
 8001994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001998:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_SPI2_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_SPI2_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_SPI2_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_SPI2_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_SPI2_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SPI2_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_SPI2_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SPI2_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_SPI2_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SPI2_Init+0x64>)
 80019d2:	220a      	movs	r2, #10
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_SPI2_Init+0x64>)
 80019d8:	f7ff fc6a 	bl	80012b0 <HAL_SPI_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80019e2:	f000 f89d 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000002c 	.word	0x2000002c
 80019f0:	40003800 	.word	0x40003800

080019f4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_SPI4_Init+0x64>)
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <MX_SPI4_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a04:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a3e:	220a      	movs	r2, #10
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_SPI4_Init+0x64>)
 8001a44:	f7ff fc34 	bl	80012b0 <HAL_SPI_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_SPI4_Init+0x5e>
  {
    Error_Handler();
 8001a4e:	f000 f867 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000084 	.word	0x20000084
 8001a5c:	40013400 	.word	0x40013400

08001a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_USART2_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a90:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_USART2_UART_Init+0x4c>)
 8001a9a:	f7ff fc77 	bl	800138c <HAL_UART_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001aa4:	f000 f83c 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000134 	.word	0x20000134
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_GPIO_Init+0x68>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <HardFault_Handler+0x4>

08001b42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <BusFault_Handler+0x4>

08001b4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <UsageFault_Handler+0x4>

08001b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b82:	f7fe fd03 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <SystemInit+0x60>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <SystemInit+0x60>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <SystemInit+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <SystemInit+0x64>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <SystemInit+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SystemInit+0x64>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <SystemInit+0x64>)
 8001bb8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <SystemInit+0x64>)
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <SystemInit+0x68>)
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <SystemInit+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <SystemInit+0x64>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SystemInit+0x60>)
 8001bdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be0:	609a      	str	r2, [r3, #8]
#endif
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	24003010 	.word	0x24003010

08001bf8 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_UART_MspInit+0x30>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_UART_MspInit+0x30>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_UART_MspInit+0x30>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 8001c1c:	f000 f806 	bl	8001c2c <vcom_IoInit>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800

08001c2c <vcom_IoInit>:

void vcom_IoInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <vcom_IoInit+0x8c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	4809      	ldr	r0, [pc, #36]	; (8001cbc <vcom_IoInit+0x90>)
 8001c96:	f7fe fd7f 	bl	8000798 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <vcom_IoInit+0x90>)
 8001caa:	f7fe fd75 	bl	8000798 <HAL_GPIO_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cd0:	480b      	ldr	r0, [pc, #44]	; (8001d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cea:	f7ff ff4f 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f000 f811 	bl	8001d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fda3 	bl	800183c <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cfc:	08001dac 	.word	0x08001dac
  ldr  r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d0c:	20000174 	.word	0x20000174

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <__libc_init_array>:
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4e0d      	ldr	r6, [pc, #52]	; (8001d4c <__libc_init_array+0x38>)
 8001d18:	4c0d      	ldr	r4, [pc, #52]	; (8001d50 <__libc_init_array+0x3c>)
 8001d1a:	1ba4      	subs	r4, r4, r6
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	2500      	movs	r5, #0
 8001d20:	42a5      	cmp	r5, r4
 8001d22:	d109      	bne.n	8001d38 <__libc_init_array+0x24>
 8001d24:	4e0b      	ldr	r6, [pc, #44]	; (8001d54 <__libc_init_array+0x40>)
 8001d26:	4c0c      	ldr	r4, [pc, #48]	; (8001d58 <__libc_init_array+0x44>)
 8001d28:	f000 f820 	bl	8001d6c <_init>
 8001d2c:	1ba4      	subs	r4, r4, r6
 8001d2e:	10a4      	asrs	r4, r4, #2
 8001d30:	2500      	movs	r5, #0
 8001d32:	42a5      	cmp	r5, r4
 8001d34:	d105      	bne.n	8001d42 <__libc_init_array+0x2e>
 8001d36:	bd70      	pop	{r4, r5, r6, pc}
 8001d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d3c:	4798      	blx	r3
 8001d3e:	3501      	adds	r5, #1
 8001d40:	e7ee      	b.n	8001d20 <__libc_init_array+0xc>
 8001d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d46:	4798      	blx	r3
 8001d48:	3501      	adds	r5, #1
 8001d4a:	e7f2      	b.n	8001d32 <__libc_init_array+0x1e>
 8001d4c:	08001da4 	.word	0x08001da4
 8001d50:	08001da4 	.word	0x08001da4
 8001d54:	08001da4 	.word	0x08001da4
 8001d58:	08001da8 	.word	0x08001da8

08001d5c <memset>:
 8001d5c:	4402      	add	r2, r0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d100      	bne.n	8001d66 <memset+0xa>
 8001d64:	4770      	bx	lr
 8001d66:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6a:	e7f9      	b.n	8001d60 <memset+0x4>

08001d6c <_init>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	bf00      	nop
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr

08001d78 <_fini>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	bf00      	nop
 8001d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7e:	bc08      	pop	{r3}
 8001d80:	469e      	mov	lr, r3
 8001d82:	4770      	bx	lr
