
stm32f4_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001e20  08001e20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e24  08001e24  00011e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000200  2000000c  08001e34  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000020c  08001e34  0002020c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000da8d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d9d  00000000  00000000  0002dac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  0002f868  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  00030050  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000040cb  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027b5  00000000  00000000  0003483b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00036ff0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f50  00000000  00000000  0003706c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038fbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001e08 	.word	0x08001e08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001e08 	.word	0x08001e08

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f8e3 	bl	80003cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	200f      	movs	r0, #15
 8000208:	f000 f808 	bl	800021c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f001 fbc8 	bl	80019a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <HAL_InitTick+0x30>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a09      	ldr	r2, [pc, #36]	; (8000250 <HAL_InitTick+0x34>)
 800022a:	fba2 2303 	umull	r2, r3, r2, r3
 800022e:	099b      	lsrs	r3, r3, #6
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f8f2 	bl	800041a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000236:	2200      	movs	r2, #0
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	f04f 30ff 	mov.w	r0, #4294967295
 800023e:	f000 f8d0 	bl	80003e2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000008 	.word	0x20000008
 8000250:	10624dd3 	.word	0x10624dd3

08000254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <HAL_GetTick+0x14>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f003 0307 	and.w	r3, r3, #7
 800027a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <NVIC_SetPriorityGrouping+0x44>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029e:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <NVIC_SetPriorityGrouping+0x44>)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	60d3      	str	r3, [r2, #12]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <NVIC_GetPriorityGrouping+0x18>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	0a1b      	lsrs	r3, r3, #8
 80002be:	f003 0307 	and.w	r3, r3, #7
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	da0b      	bge.n	80002fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	490d      	ldr	r1, [pc, #52]	; (800031c <NVIC_SetPriority+0x4c>)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f003 030f 	and.w	r3, r3, #15
 80002ec:	3b04      	subs	r3, #4
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	0112      	lsls	r2, r2, #4
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	440b      	add	r3, r1
 80002f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002fa:	e009      	b.n	8000310 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	4908      	ldr	r1, [pc, #32]	; (8000320 <NVIC_SetPriority+0x50>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	e000e100 	.word	0xe000e100

08000324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	f1c3 0307 	rsb	r3, r3, #7
 800033e:	2b04      	cmp	r3, #4
 8000340:	bf28      	it	cs
 8000342:	2304      	movcs	r3, #4
 8000344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3304      	adds	r3, #4
 800034a:	2b06      	cmp	r3, #6
 800034c:	d902      	bls.n	8000354 <NVIC_EncodePriority+0x30>
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	3b03      	subs	r3, #3
 8000352:	e000      	b.n	8000356 <NVIC_EncodePriority+0x32>
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	2201      	movs	r2, #1
 800035a:	69bb      	ldr	r3, [r7, #24]
 800035c:	fa02 f303 	lsl.w	r3, r2, r3
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	401a      	ands	r2, r3
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800036a:	2101      	movs	r1, #1
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	1e59      	subs	r1, r3, #1
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000398:	d301      	bcc.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e00f      	b.n	80003be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <SysTick_Config+0x40>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	210f      	movs	r1, #15
 80003a8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ac:	f7ff ff90 	bl	80002d0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <SysTick_Config+0x40>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <SysTick_Config+0x40>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	e000e010 	.word	0xe000e010

080003cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff49 	bl	800026c <NVIC_SetPriorityGrouping>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b086      	sub	sp, #24
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	4603      	mov	r3, r0
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
 80003ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003f4:	f7ff ff5e 	bl	80002b4 <NVIC_GetPriorityGrouping>
 80003f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	68b9      	ldr	r1, [r7, #8]
 80003fe:	6978      	ldr	r0, [r7, #20]
 8000400:	f7ff ff90 	bl	8000324 <NVIC_EncodePriority>
 8000404:	4602      	mov	r2, r0
 8000406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff5f 	bl	80002d0 <NVIC_SetPriority>
}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f7ff ffb0 	bl	8000388 <SysTick_Config>
 8000428:	4603      	mov	r3, r0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b04      	cmp	r3, #4
 8000440:	d106      	bne.n	8000450 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000442:	4a09      	ldr	r2, [pc, #36]	; (8000468 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800044e:	e005      	b.n	800045c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000450:	4a05      	ldr	r2, [pc, #20]	; (8000468 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f023 0304 	bic.w	r3, r3, #4
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	e000e010 	.word	0xe000e010

0800046c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800046c:	b480      	push	{r7}
 800046e:	b089      	sub	sp, #36	; 0x24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	e159      	b.n	800073c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000488:	2201      	movs	r2, #1
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	4013      	ands	r3, r2
 800049a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800049c:	693a      	ldr	r2, [r7, #16]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	f040 8148 	bne.w	8000736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d003      	beq.n	80004b6 <HAL_GPIO_Init+0x4a>
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	2b12      	cmp	r3, #18
 80004b4:	d123      	bne.n	80004fe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	08da      	lsrs	r2, r3, #3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3208      	adds	r2, #8
 80004be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	f003 0307 	and.w	r3, r3, #7
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	220f      	movs	r2, #15
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	43db      	mvns	r3, r3
 80004d4:	69ba      	ldr	r2, [r7, #24]
 80004d6:	4013      	ands	r3, r2
 80004d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	691a      	ldr	r2, [r3, #16]
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	69ba      	ldr	r2, [r7, #24]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80004f0:	69fb      	ldr	r3, [r7, #28]
 80004f2:	08da      	lsrs	r2, r3, #3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3208      	adds	r2, #8
 80004f8:	69b9      	ldr	r1, [r7, #24]
 80004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	2203      	movs	r2, #3
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	69ba      	ldr	r2, [r7, #24]
 8000512:	4013      	ands	r3, r2
 8000514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f003 0203 	and.w	r2, r3, #3
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	69ba      	ldr	r2, [r7, #24]
 8000528:	4313      	orrs	r3, r2
 800052a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	69ba      	ldr	r2, [r7, #24]
 8000530:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d00b      	beq.n	8000552 <HAL_GPIO_Init+0xe6>
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d007      	beq.n	8000552 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000546:	2b11      	cmp	r3, #17
 8000548:	d003      	beq.n	8000552 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b12      	cmp	r3, #18
 8000550:	d130      	bne.n	80005b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	2203      	movs	r2, #3
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	43db      	mvns	r3, r3
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	4013      	ands	r3, r2
 8000568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68da      	ldr	r2, [r3, #12]
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	69ba      	ldr	r2, [r7, #24]
 8000578:	4313      	orrs	r3, r2
 800057a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	69ba      	ldr	r2, [r7, #24]
 8000580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000588:	2201      	movs	r2, #1
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	69ba      	ldr	r2, [r7, #24]
 8000594:	4013      	ands	r3, r2
 8000596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	091b      	lsrs	r3, r3, #4
 800059e:	f003 0201 	and.w	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2203      	movs	r2, #3
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	69ba      	ldr	r2, [r7, #24]
 80005c8:	4013      	ands	r3, r2
 80005ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	4313      	orrs	r3, r2
 80005dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f000 80a2 	beq.w	8000736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4a56      	ldr	r2, [pc, #344]	; (8000750 <HAL_GPIO_Init+0x2e4>)
 80005f8:	4b55      	ldr	r3, [pc, #340]	; (8000750 <HAL_GPIO_Init+0x2e4>)
 80005fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b53      	ldr	r3, [pc, #332]	; (8000750 <HAL_GPIO_Init+0x2e4>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800060e:	4a51      	ldr	r2, [pc, #324]	; (8000754 <HAL_GPIO_Init+0x2e8>)
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	3302      	adds	r3, #2
 8000616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	220f      	movs	r2, #15
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	4013      	ands	r3, r2
 8000630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a48      	ldr	r2, [pc, #288]	; (8000758 <HAL_GPIO_Init+0x2ec>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d019      	beq.n	800066e <HAL_GPIO_Init+0x202>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a47      	ldr	r2, [pc, #284]	; (800075c <HAL_GPIO_Init+0x2f0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d013      	beq.n	800066a <HAL_GPIO_Init+0x1fe>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a46      	ldr	r2, [pc, #280]	; (8000760 <HAL_GPIO_Init+0x2f4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d00d      	beq.n	8000666 <HAL_GPIO_Init+0x1fa>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a45      	ldr	r2, [pc, #276]	; (8000764 <HAL_GPIO_Init+0x2f8>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d007      	beq.n	8000662 <HAL_GPIO_Init+0x1f6>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a44      	ldr	r2, [pc, #272]	; (8000768 <HAL_GPIO_Init+0x2fc>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <HAL_GPIO_Init+0x1f2>
 800065a:	2304      	movs	r3, #4
 800065c:	e008      	b.n	8000670 <HAL_GPIO_Init+0x204>
 800065e:	2307      	movs	r3, #7
 8000660:	e006      	b.n	8000670 <HAL_GPIO_Init+0x204>
 8000662:	2303      	movs	r3, #3
 8000664:	e004      	b.n	8000670 <HAL_GPIO_Init+0x204>
 8000666:	2302      	movs	r3, #2
 8000668:	e002      	b.n	8000670 <HAL_GPIO_Init+0x204>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <HAL_GPIO_Init+0x204>
 800066e:	2300      	movs	r3, #0
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	f002 0203 	and.w	r2, r2, #3
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	4093      	lsls	r3, r2
 800067a:	69ba      	ldr	r2, [r7, #24]
 800067c:	4313      	orrs	r3, r2
 800067e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000680:	4934      	ldr	r1, [pc, #208]	; (8000754 <HAL_GPIO_Init+0x2e8>)
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	3302      	adds	r3, #2
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800068e:	4b37      	ldr	r3, [pc, #220]	; (800076c <HAL_GPIO_Init+0x300>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	43db      	mvns	r3, r3
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	4013      	ands	r3, r2
 800069c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006b2:	4a2e      	ldr	r2, [pc, #184]	; (800076c <HAL_GPIO_Init+0x300>)
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <HAL_GPIO_Init+0x300>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	43db      	mvns	r3, r3
 80006c2:	69ba      	ldr	r2, [r7, #24]
 80006c4:	4013      	ands	r3, r2
 80006c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d003      	beq.n	80006dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	4313      	orrs	r3, r2
 80006da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <HAL_GPIO_Init+0x300>)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <HAL_GPIO_Init+0x300>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	43db      	mvns	r3, r3
 80006ec:	69ba      	ldr	r2, [r7, #24]
 80006ee:	4013      	ands	r3, r2
 80006f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80006fe:	69ba      	ldr	r2, [r7, #24]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4313      	orrs	r3, r2
 8000704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_GPIO_Init+0x300>)
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_GPIO_Init+0x300>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	43db      	mvns	r3, r3
 8000716:	69ba      	ldr	r2, [r7, #24]
 8000718:	4013      	ands	r3, r2
 800071a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	4313      	orrs	r3, r2
 800072e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_GPIO_Init+0x300>)
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3301      	adds	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	f67f aea2 	bls.w	8000488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000744:	bf00      	nop
 8000746:	3724      	adds	r7, #36	; 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	40013800 	.word	0x40013800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40013c00 	.word	0x40013c00

08000770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	; 0x38
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d075      	beq.n	8000874 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000788:	4ba4      	ldr	r3, [pc, #656]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 030c 	and.w	r3, r3, #12
 8000790:	2b04      	cmp	r3, #4
 8000792:	d00c      	beq.n	80007ae <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000794:	4ba1      	ldr	r3, [pc, #644]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800079c:	2b08      	cmp	r3, #8
 800079e:	d112      	bne.n	80007c6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007a0:	4b9e      	ldr	r3, [pc, #632]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007ac:	d10b      	bne.n	80007c6 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d05b      	beq.n	8000872 <HAL_RCC_OscConfig+0x102>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d157      	bne.n	8000872 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e224      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ce:	d106      	bne.n	80007de <HAL_RCC_OscConfig+0x6e>
 80007d0:	4a92      	ldr	r2, [pc, #584]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007d2:	4b92      	ldr	r3, [pc, #584]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	e01d      	b.n	800081a <HAL_RCC_OscConfig+0xaa>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e6:	d10c      	bne.n	8000802 <HAL_RCC_OscConfig+0x92>
 80007e8:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007ea:	4b8c      	ldr	r3, [pc, #560]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4a89      	ldr	r2, [pc, #548]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007f6:	4b89      	ldr	r3, [pc, #548]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	e00b      	b.n	800081a <HAL_RCC_OscConfig+0xaa>
 8000802:	4a86      	ldr	r2, [pc, #536]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000804:	4b85      	ldr	r3, [pc, #532]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4a83      	ldr	r2, [pc, #524]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000810:	4b82      	ldr	r3, [pc, #520]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d013      	beq.n	800084a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000822:	f7ff fd17 	bl	8000254 <HAL_GetTick>
 8000826:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000828:	e008      	b.n	800083c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800082a:	f7ff fd13 	bl	8000254 <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b64      	cmp	r3, #100	; 0x64
 8000836:	d901      	bls.n	800083c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000838:	2303      	movs	r3, #3
 800083a:	e1e9      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083c:	4b77      	ldr	r3, [pc, #476]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f0      	beq.n	800082a <HAL_RCC_OscConfig+0xba>
 8000848:	e014      	b.n	8000874 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800084a:	f7ff fd03 	bl	8000254 <HAL_GetTick>
 800084e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000850:	e008      	b.n	8000864 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000852:	f7ff fcff 	bl	8000254 <HAL_GetTick>
 8000856:	4602      	mov	r2, r0
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b64      	cmp	r3, #100	; 0x64
 800085e:	d901      	bls.n	8000864 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8000860:	2303      	movs	r3, #3
 8000862:	e1d5      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000864:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f0      	bne.n	8000852 <HAL_RCC_OscConfig+0xe2>
 8000870:	e000      	b.n	8000874 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000872:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d077      	beq.n	8000970 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000880:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 030c 	and.w	r3, r3, #12
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00b      	beq.n	80008a4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800088c:	4b63      	ldr	r3, [pc, #396]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000894:	2b08      	cmp	r3, #8
 8000896:	d126      	bne.n	80008e6 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000898:	4b60      	ldr	r3, [pc, #384]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d120      	bne.n	80008e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a4:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <HAL_RCC_OscConfig+0x14c>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d001      	beq.n	80008bc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e1a9      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008bc:	4857      	ldr	r0, [pc, #348]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80008be:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6919      	ldr	r1, [r3, #16]
 80008ca:	23f8      	movs	r3, #248	; 0xf8
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d0:	fa93 f3a3 	rbit	r3, r3
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	fab3 f383 	clz	r3, r3
 80008dc:	fa01 f303 	lsl.w	r3, r1, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e4:	e044      	b.n	8000970 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d02a      	beq.n	8000944 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <HAL_RCC_OscConfig+0x2b0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008f4:	f7ff fcae 	bl	8000254 <HAL_GetTick>
 80008f8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fa:	e008      	b.n	800090e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008fc:	f7ff fcaa 	bl	8000254 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b02      	cmp	r3, #2
 8000908:	d901      	bls.n	800090e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800090a:	2303      	movs	r3, #3
 800090c:	e180      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f0      	beq.n	80008fc <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091a:	4840      	ldr	r0, [pc, #256]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6919      	ldr	r1, [r3, #16]
 8000928:	23f8      	movs	r3, #248	; 0xf8
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	fa93 f3a3 	rbit	r3, r3
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	fab3 f383 	clz	r3, r3
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	6003      	str	r3, [r0, #0]
 8000942:	e015      	b.n	8000970 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000944:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <HAL_RCC_OscConfig+0x2b0>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800094a:	f7ff fc83 	bl	8000254 <HAL_GetTick>
 800094e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000950:	e008      	b.n	8000964 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000952:	f7ff fc7f 	bl	8000254 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
 8000958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d901      	bls.n	8000964 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8000960:	2303      	movs	r3, #3
 8000962:	e155      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000964:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f0      	bne.n	8000952 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	2b00      	cmp	r3, #0
 800097a:	d030      	beq.n	80009de <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d016      	beq.n	80009b2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_RCC_OscConfig+0x2b4>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800098a:	f7ff fc63 	bl	8000254 <HAL_GetTick>
 800098e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000990:	e008      	b.n	80009a4 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000992:	f7ff fc5f 	bl	8000254 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d901      	bls.n	80009a4 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80009a0:	2303      	movs	r3, #3
 80009a2:	e135      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80009a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f0      	beq.n	8000992 <HAL_RCC_OscConfig+0x222>
 80009b0:	e015      	b.n	80009de <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HAL_RCC_OscConfig+0x2b4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009b8:	f7ff fc4c 	bl	8000254 <HAL_GetTick>
 80009bc:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009be:	e008      	b.n	80009d2 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c0:	f7ff fc48 	bl	8000254 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d901      	bls.n	80009d2 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80009ce:	2303      	movs	r3, #3
 80009d0:	e11e      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80009d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f0      	bne.n	80009c0 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8086 	beq.w	8000af8 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_RCC_OscConfig+0x2ac>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_RCC_OscConfig+0x2b8>)
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_RCC_OscConfig+0x2b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000a14:	f7ff fc1e 	bl	8000254 <HAL_GetTick>
 8000a18:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a1a:	e010      	b.n	8000a3e <HAL_RCC_OscConfig+0x2ce>
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	42470000 	.word	0x42470000
 8000a24:	42470e80 	.word	0x42470e80
 8000a28:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a2c:	f7ff fc12 	bl	8000254 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e0e8      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a3e:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_RCC_OscConfig+0x4a8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d106      	bne.n	8000a60 <HAL_RCC_OscConfig+0x2f0>
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000a5e:	e01c      	b.n	8000a9a <HAL_RCC_OscConfig+0x32a>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d10c      	bne.n	8000a82 <HAL_RCC_OscConfig+0x312>
 8000a68:	4a6c      	ldr	r2, [pc, #432]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6713      	str	r3, [r2, #112]	; 0x70
 8000a74:	4a69      	ldr	r2, [pc, #420]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000a80:	e00b      	b.n	8000a9a <HAL_RCC_OscConfig+0x32a>
 8000a82:	4a66      	ldr	r2, [pc, #408]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a84:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a88:	f023 0301 	bic.w	r3, r3, #1
 8000a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000a8e:	4a63      	ldr	r2, [pc, #396]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a90:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a94:	f023 0304 	bic.w	r3, r3, #4
 8000a98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d015      	beq.n	8000ace <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbd7 	bl	8000254 <HAL_GetTick>
 8000aa6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fbd3 	bl	8000254 <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e0a7      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac0:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0ee      	beq.n	8000aaa <HAL_RCC_OscConfig+0x33a>
 8000acc:	e014      	b.n	8000af8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ace:	f7ff fbc1 	bl	8000254 <HAL_GetTick>
 8000ad2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ad4:	e00a      	b.n	8000aec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fbbd 	bl	8000254 <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e091      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aec:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1ee      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f000 8086 	beq.w	8000c0e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d07d      	beq.n	8000c0a <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d162      	bne.n	8000bdc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <HAL_RCC_OscConfig+0x4b0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1c:	f7ff fb9a 	bl	8000254 <HAL_GetTick>
 8000b20:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b24:	f7ff fb96 	bl	8000254 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e06c      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f0      	bne.n	8000b24 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b42:	4836      	ldr	r0, [pc, #216]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69da      	ldr	r2, [r3, #28]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	fa93 f3a3 	rbit	r3, r3
 8000b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	1e59      	subs	r1, r3, #1
 8000b74:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	617b      	str	r3, [r7, #20]
  return(result);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fab3 f383 	clz	r3, r3
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b92:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	fa93 f3a3 	rbit	r3, r3
 8000b9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	fab3 f383 	clz	r3, r3
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_RCC_OscConfig+0x4b0>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fb4e 	bl	8000254 <HAL_GetTick>
 8000bb8:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bbc:	f7ff fb4a 	bl	8000254 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e020      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f0      	beq.n	8000bbc <HAL_RCC_OscConfig+0x44c>
 8000bda:	e018      	b.n	8000c0e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_RCC_OscConfig+0x4b0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be2:	f7ff fb37 	bl	8000254 <HAL_GetTick>
 8000be6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000be8:	e008      	b.n	8000bfc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bea:	f7ff fb33 	bl	8000254 <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d901      	bls.n	8000bfc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e009      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_RCC_OscConfig+0x4ac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1f0      	bne.n	8000bea <HAL_RCC_OscConfig+0x47a>
 8000c08:	e001      	b.n	8000c0e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3738      	adds	r7, #56	; 0x38
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40007000 	.word	0x40007000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	42470060 	.word	0x42470060

08000c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c32:	4b75      	ldr	r3, [pc, #468]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 020f 	and.w	r2, r3, #15
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d20c      	bcs.n	8000c5a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c40:	4b71      	ldr	r3, [pc, #452]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 020f 	and.w	r2, r3, #15
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d001      	beq.n	8000c5a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e0d2      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d008      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c66:	4969      	ldr	r1, [pc, #420]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000c68:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 8086 	beq.w	8000d92 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d107      	bne.n	8000c9e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	4b5f      	ldr	r3, [pc, #380]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d119      	bne.n	8000cce <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e0b0      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d003      	beq.n	8000cae <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d107      	bne.n	8000cbe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cae:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e0a0      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e098      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cce:	494f      	ldr	r1, [pc, #316]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000cd0:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f023 0203 	bic.w	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ce0:	f7ff fab8 	bl	8000254 <HAL_GetTick>
 8000ce4:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d112      	bne.n	8000d14 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cee:	e00a      	b.n	8000d06 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf0:	f7ff fab0 	bl	8000254 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e07c      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d06:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d1ee      	bne.n	8000cf0 <HAL_RCC_ClockConfig+0xcc>
 8000d12:	e03e      	b.n	8000d92 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d112      	bne.n	8000d42 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1c:	e00a      	b.n	8000d34 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1e:	f7ff fa99 	bl	8000254 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e065      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d34:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d1ee      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xfa>
 8000d40:	e027      	b.n	8000d92 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d11d      	bne.n	8000d86 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000d4a:	e00a      	b.n	8000d62 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f7ff fa82 	bl	8000254 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e04e      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d1ee      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x128>
 8000d6e:	e010      	b.n	8000d92 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d70:	f7ff fa70 	bl	8000254 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e03c      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ee      	bne.n	8000d70 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 020f 	and.w	r2, r3, #15
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d90c      	bls.n	8000dba <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_RCC_ClockConfig+0x1e4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 020f 	and.w	r2, r3, #15
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e022      	b.n	8000e00 <HAL_RCC_ClockConfig+0x1dc>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc6:	4911      	ldr	r1, [pc, #68]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d009      	beq.n	8000df8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000de4:	4909      	ldr	r1, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1e8>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]

  /* Update the SystemCoreClock global variable */
 // SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df8:	200f      	movs	r0, #15
 8000dfa:	f7ff fa0f 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023c00 	.word	0x40023c00
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 // return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
}
 8000e2c:	bf00      	nop
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
} 
 8000e3c:	bf00      	nop
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e05c      	b.n	8000f14 <HAL_SPI_Init+0xcc>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f854 	bl	8000f1c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2202      	movs	r2, #2
 8000e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6851      	ldr	r1, [r2, #4]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6892      	ldr	r2, [r2, #8]
 8000e98:	4311      	orrs	r1, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68d2      	ldr	r2, [r2, #12]
 8000e9e:	4311      	orrs	r1, r2
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6912      	ldr	r2, [r2, #16]
 8000ea4:	4311      	orrs	r1, r2
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6952      	ldr	r2, [r2, #20]
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6992      	ldr	r2, [r2, #24]
 8000eb0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000eb4:	4311      	orrs	r1, r2
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	69d2      	ldr	r2, [r2, #28]
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6a12      	ldr	r2, [r2, #32]
 8000ec0:	4311      	orrs	r1, r2
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6992      	ldr	r2, [r2, #24]
 8000ed2:	0c12      	lsrs	r2, r2, #16
 8000ed4:	f002 0104 	and.w	r1, r2, #4
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee8:	d104      	bne.n	8000ef4 <HAL_SPI_Init+0xac>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ef2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	69d2      	ldr	r2, [r2, #28]
 8000efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f02:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
  */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <HAL_SPI_TransmitReceive+0x36>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e1f1      	b.n	800134a <HAL_SPI_TransmitReceive+0x41a>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f6e:	f7ff f971 	bl	8000254 <HAL_GetTick>
 8000f72:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d00e      	beq.n	8000fa8 <HAL_SPI_TransmitReceive+0x78>
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000f90:	d106      	bne.n	8000fa0 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <HAL_SPI_TransmitReceive+0x70>
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d003      	beq.n	8000fa8 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000fa6:	e1c6      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <HAL_SPI_TransmitReceive+0x8a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <HAL_SPI_TransmitReceive+0x8a>
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d103      	bne.n	8000fc2 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000fc0:	e1b9      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d103      	bne.n	8000fd6 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001014:	d110      	bne.n	8001038 <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001024:	400b      	ands	r3, r1
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001036:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	2b40      	cmp	r3, #64	; 0x40
 8001044:	d007      	beq.n	8001056 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800105e:	f040 8084 	bne.w	800116a <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_SPI_TransmitReceive+0x144>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800106e:	b29b      	uxth	r3, r3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d16f      	bne.n	8001154 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	8812      	ldrh	r2, [r2, #0]
 800107c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3302      	adds	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001088:	b29b      	uxth	r3, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	b29a      	uxth	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001092:	e05f      	b.n	8001154 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d02e      	beq.n	80010f8 <HAL_SPI_TransmitReceive+0x1c8>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d029      	beq.n	80010f8 <HAL_SPI_TransmitReceive+0x1c8>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d122      	bne.n	80010f8 <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	8812      	ldrh	r2, [r2, #0]
 80010ba:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	3302      	adds	r3, #2
 80010c0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_SPI_TransmitReceive+0x1c8>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e6:	d107      	bne.n	80010f8 <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010f6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d018      	beq.n	8001134 <HAL_SPI_TransmitReceive+0x204>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d111      	bne.n	8001134 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3302      	adds	r3, #2
 8001120:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b01      	subs	r3, #1
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001130:	2301      	movs	r3, #1
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113a:	d00b      	beq.n	8001154 <HAL_SPI_TransmitReceive+0x224>
 800113c:	f7ff f88a 	bl	8000254 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001148:	429a      	cmp	r2, r3
 800114a:	d303      	bcc.n	8001154 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001152:	e0f0      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d19a      	bne.n	8001094 <HAL_SPI_TransmitReceive+0x164>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001162:	b29b      	uxth	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d195      	bne.n	8001094 <HAL_SPI_TransmitReceive+0x164>
 8001168:	e083      	b.n	8001272 <HAL_SPI_TransmitReceive+0x342>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <HAL_SPI_TransmitReceive+0x24c>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001176:	b29b      	uxth	r3, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d170      	bne.n	800125e <HAL_SPI_TransmitReceive+0x32e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	330c      	adds	r3, #12
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	7812      	ldrb	r2, [r2, #0]
 8001186:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001192:	b29b      	uxth	r3, r3
 8001194:	3b01      	subs	r3, #1
 8001196:	b29a      	uxth	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800119c:	e05f      	b.n	800125e <HAL_SPI_TransmitReceive+0x32e>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d02f      	beq.n	8001204 <HAL_SPI_TransmitReceive+0x2d4>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d02a      	beq.n	8001204 <HAL_SPI_TransmitReceive+0x2d4>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d123      	bne.n	8001204 <HAL_SPI_TransmitReceive+0x2d4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f103 020c 	add.w	r2, r3, #12
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c59      	adds	r1, r3, #1
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10c      	bne.n	8001204 <HAL_SPI_TransmitReceive+0x2d4>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f2:	d107      	bne.n	8001204 <HAL_SPI_TransmitReceive+0x2d4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001202:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001208:	b29b      	uxth	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d017      	beq.n	800123e <HAL_SPI_TransmitReceive+0x30e>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d110      	bne.n	800123e <HAL_SPI_TransmitReceive+0x30e>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	68d2      	ldr	r2, [r2, #12]
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001230:	b29b      	uxth	r3, r3
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800123a:	2301      	movs	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d00b      	beq.n	800125e <HAL_SPI_TransmitReceive+0x32e>
 8001246:	f7ff f805 	bl	8000254 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	429a      	cmp	r2, r3
 8001254:	d303      	bcc.n	800125e <HAL_SPI_TransmitReceive+0x32e>
      {
        errorcode = HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800125c:	e06b      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d19a      	bne.n	800119e <HAL_SPI_TransmitReceive+0x26e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800126c:	b29b      	uxth	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d195      	bne.n	800119e <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800127a:	d11a      	bne.n	80012b2 <HAL_SPI_TransmitReceive+0x382>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001282:	2201      	movs	r2, #1
 8001284:	2101      	movs	r1, #1
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f863 	bl	8001352 <SPI_WaitFlagStateUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_SPI_TransmitReceive+0x376>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	f043 0202 	orr.w	r2, r3, #2
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80012a4:	e047      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 80012b0:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d10d      	bne.n	80012dc <HAL_SPI_TransmitReceive+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80012d4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e2:	2201      	movs	r2, #1
 80012e4:	2102      	movs	r1, #2
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f833 	bl	8001352 <SPI_WaitFlagStateUntilTimeout>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_SPI_TransmitReceive+0x3ca>
  {
    errorcode = HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80012f8:	e01d      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f890 	bl	8001424 <SPI_CheckFlag_BSY>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_SPI_TransmitReceive+0x3e8>
  {
    errorcode = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2220      	movs	r2, #32
 8001314:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001316:	e00e      	b.n	8001336 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10a      	bne.n	8001336 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800134a:	4618      	mov	r0, r3
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001360:	e04d      	b.n	80013fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d049      	beq.n	80013fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001370:	f7fe ff70 	bl	8000254 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad2      	subs	r2, r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d33e      	bcc.n	80013fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	6852      	ldr	r2, [r2, #4]
 800138a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800138e:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001398:	d111      	bne.n	80013be <SPI_WaitFlagStateUntilTimeout+0x6c>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013a2:	d004      	beq.n	80013ae <SPI_WaitFlagStateUntilTimeout+0x5c>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ac:	d107      	bne.n	80013be <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c6:	d110      	bne.n	80013ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6819      	ldr	r1, [r3, #0]
 80013d2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80013d6:	400b      	ands	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e00e      	b.n	800141c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	429a      	cmp	r2, r3
 800140c:	d101      	bne.n	8001412 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800140e:	2201      	movs	r2, #1
 8001410:	e000      	b.n	8001414 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001412:	2200      	movs	r2, #0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d1a3      	bne.n	8001362 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2200      	movs	r2, #0
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff ff89 	bl	8001352 <SPI_WaitFlagStateUntilTimeout>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f043 0220 	orr.w	r2, r3, #32
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e000      	b.n	8001458 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e03f      	b.n	80014f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fc36 	bl	8001cf8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	68d2      	ldr	r2, [r2, #12]
 800149e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014a2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f829 	bl	80014fc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	6912      	ldr	r2, [r2, #16]
 80014b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	6952      	ldr	r2, [r2, #20]
 80014c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014c8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	68d2      	ldr	r2, [r2, #12]
 80014d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001516:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001538:	f023 030c 	bic.w	r3, r3, #12
 800153c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4313      	orrs	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001570:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	f040 80e4 	bne.w	8001758 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4aab      	ldr	r2, [pc, #684]	; (8001844 <UART_SetConfig+0x348>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d004      	beq.n	80015a4 <UART_SetConfig+0xa8>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4aaa      	ldr	r2, [pc, #680]	; (8001848 <UART_SetConfig+0x34c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d16c      	bne.n	800167e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	f7ff fc46 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	441a      	add	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4aa2      	ldr	r2, [pc, #648]	; (800184c <UART_SetConfig+0x350>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	095b      	lsrs	r3, r3, #5
 80015ca:	011d      	lsls	r5, r3, #4
 80015cc:	f7ff fc34 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009a      	lsls	r2, r3, #2
 80015da:	441a      	add	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80015e6:	f7ff fc27 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	441a      	add	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	4a92      	ldr	r2, [pc, #584]	; (800184c <UART_SetConfig+0x350>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2264      	movs	r2, #100	; 0x64
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	1af3      	subs	r3, r6, r3
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	3332      	adds	r3, #50	; 0x32
 8001614:	4a8d      	ldr	r2, [pc, #564]	; (800184c <UART_SetConfig+0x350>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001622:	441d      	add	r5, r3
 8001624:	f7ff fc08 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001628:	4602      	mov	r2, r0
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	441a      	add	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fbb2 f6f3 	udiv	r6, r2, r3
 800163e:	f7ff fbfb 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001642:	4602      	mov	r2, r0
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009a      	lsls	r2, r3, #2
 800164c:	441a      	add	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	4a7c      	ldr	r2, [pc, #496]	; (800184c <UART_SetConfig+0x350>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2264      	movs	r2, #100	; 0x64
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	1af3      	subs	r3, r6, r3
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	3332      	adds	r3, #50	; 0x32
 800166c:	4a77      	ldr	r2, [pc, #476]	; (800184c <UART_SetConfig+0x350>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	442b      	add	r3, r5
 800167a:	60a3      	str	r3, [r4, #8]
 800167c:	e154      	b.n	8001928 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	f7ff fbd1 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8001686:	4602      	mov	r2, r0
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	009a      	lsls	r2, r3, #2
 8001690:	441a      	add	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	4a6b      	ldr	r2, [pc, #428]	; (800184c <UART_SetConfig+0x350>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	011d      	lsls	r5, r3, #4
 80016a6:	f7ff fbbf 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009a      	lsls	r2, r3, #2
 80016b4:	441a      	add	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80016c0:	f7ff fbb2 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009a      	lsls	r2, r3, #2
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4a5c      	ldr	r2, [pc, #368]	; (800184c <UART_SetConfig+0x350>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	2264      	movs	r2, #100	; 0x64
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	1af3      	subs	r3, r6, r3
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	3332      	adds	r3, #50	; 0x32
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <UART_SetConfig+0x350>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80016fc:	441d      	add	r5, r3
 80016fe:	f7ff fb93 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8001702:	4602      	mov	r2, r0
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009a      	lsls	r2, r3, #2
 800170c:	441a      	add	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fbb2 f6f3 	udiv	r6, r2, r3
 8001718:	f7ff fb86 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 800171c:	4602      	mov	r2, r0
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	441a      	add	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <UART_SetConfig+0x350>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	2264      	movs	r2, #100	; 0x64
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	1af3      	subs	r3, r6, r3
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	3332      	adds	r3, #50	; 0x32
 8001746:	4a41      	ldr	r2, [pc, #260]	; (800184c <UART_SetConfig+0x350>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	442b      	add	r3, r5
 8001754:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001756:	e0e7      	b.n	8001928 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a39      	ldr	r2, [pc, #228]	; (8001844 <UART_SetConfig+0x348>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d004      	beq.n	800176c <UART_SetConfig+0x270>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a38      	ldr	r2, [pc, #224]	; (8001848 <UART_SetConfig+0x34c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d171      	bne.n	8001850 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681c      	ldr	r4, [r3, #0]
 8001770:	f7ff fb62 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001774:	4602      	mov	r2, r0
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	441a      	add	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4a30      	ldr	r2, [pc, #192]	; (800184c <UART_SetConfig+0x350>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	095b      	lsrs	r3, r3, #5
 8001792:	011d      	lsls	r5, r3, #4
 8001794:	f7ff fb50 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001798:	4602      	mov	r2, r0
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009a      	lsls	r2, r3, #2
 80017a2:	441a      	add	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80017ae:	f7ff fb43 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009a      	lsls	r2, r3, #2
 80017bc:	441a      	add	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <UART_SetConfig+0x350>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2264      	movs	r2, #100	; 0x64
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	1af3      	subs	r3, r6, r3
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3332      	adds	r3, #50	; 0x32
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <UART_SetConfig+0x350>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e8:	441d      	add	r5, r3
 80017ea:	f7ff fb25 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009a      	lsls	r2, r3, #2
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	fbb2 f6f3 	udiv	r6, r2, r3
 8001804:	f7ff fb18 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
 8001808:	4602      	mov	r2, r0
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	441a      	add	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <UART_SetConfig+0x350>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	2264      	movs	r2, #100	; 0x64
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	1af3      	subs	r3, r6, r3
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	3332      	adds	r3, #50	; 0x32
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <UART_SetConfig+0x350>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	442b      	add	r3, r5
 8001840:	60a3      	str	r3, [r4, #8]
 8001842:	e071      	b.n	8001928 <UART_SetConfig+0x42c>
 8001844:	40011000 	.word	0x40011000
 8001848:	40011400 	.word	0x40011400
 800184c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681c      	ldr	r4, [r3, #0]
 8001854:	f7ff fae8 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8001858:	4602      	mov	r2, r0
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009a      	lsls	r2, r3, #2
 8001862:	441a      	add	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <UART_SetConfig+0x434>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	011d      	lsls	r5, r3, #4
 8001878:	f7ff fad6 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 800187c:	4602      	mov	r2, r0
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009a      	lsls	r2, r3, #2
 8001886:	441a      	add	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001892:	f7ff fac9 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8001896:	4602      	mov	r2, r0
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	441a      	add	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	4a20      	ldr	r2, [pc, #128]	; (8001930 <UART_SetConfig+0x434>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2264      	movs	r2, #100	; 0x64
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	1af3      	subs	r3, r6, r3
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	3332      	adds	r3, #50	; 0x32
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <UART_SetConfig+0x434>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018cc:	441d      	add	r5, r3
 80018ce:	f7ff faab 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009a      	lsls	r2, r3, #2
 80018dc:	441a      	add	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80018e8:	f7ff fa9e 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	441a      	add	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <UART_SetConfig+0x434>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	2264      	movs	r2, #100	; 0x64
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	1af3      	subs	r3, r6, r3
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	3332      	adds	r3, #50	; 0x32
 8001916:	4a06      	ldr	r2, [pc, #24]	; (8001930 <UART_SetConfig+0x434>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	442b      	add	r3, r5
 8001924:	60a3      	str	r3, [r4, #8]
}
 8001926:	e7ff      	b.n	8001928 <UART_SetConfig+0x42c>
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001930:	51eb851f 	.word	0x51eb851f

08001934 <GPIO_Init>:
 */

#include "includes.h"

void GPIO_Init(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <GPIO_Init+0x68>)
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <GPIO_Init+0x68>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <GPIO_Init+0x68>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <GPIO_Init+0x68>)
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <GPIO_Init+0x68>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <GPIO_Init+0x68>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <GPIO_Init+0x68>)
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <GPIO_Init+0x68>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <GPIO_Init+0x68>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f7fe fd11 	bl	80003cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
 80019b2:	f7fe fd16 	bl	80003e2 <HAL_NVIC_SetPriority>

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <main>:
uint8_t ReadyMsg[] = "READY";
char msgBuf[100];
char loraBuf[50];

int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c2:	f7fe fc09 	bl	80001d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80019c6:	f000 f827 	bl	8001a18 <SystemClock_Config>

  /* Initialize all configured peripherals */
  GPIO_Init();
 80019ca:	f7ff ffb3 	bl	8001934 <GPIO_Init>
  SPI1_Init();
 80019ce:	f000 f87d 	bl	8001acc <SPI1_Init>
  SPI2_Init();
 80019d2:	f000 f8ab 	bl	8001b2c <SPI2_Init>
  SPI4_Init();
 80019d6:	f000 f8d9 	bl	8001b8c <SPI4_Init>
  USART2_UART_Init();
 80019da:	f000 f967 	bl	8001cac <USART2_UART_Init>


  while (1)
  {
	  HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)ReadyMsg, (uint8_t *)msgBuf, 7, 5000);
 80019de:	f241 3388 	movw	r3, #5000	; 0x1388
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2307      	movs	r3, #7
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <main+0x48>)
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <main+0x4c>)
 80019ea:	4808      	ldr	r0, [pc, #32]	; (8001a0c <main+0x50>)
 80019ec:	f7ff faa0 	bl	8000f30 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi4, (uint8_t*)msgBuf, (uint8_t *)loraBuf, 7, 5000);
 80019f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2307      	movs	r3, #7
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <main+0x54>)
 80019fa:	4902      	ldr	r1, [pc, #8]	; (8001a04 <main+0x48>)
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <main+0x58>)
 80019fe:	f7ff fa97 	bl	8000f30 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)ReadyMsg, (uint8_t *)msgBuf, 7, 5000);
 8001a02:	e7ec      	b.n	80019de <main+0x22>
 8001a04:	20000060 	.word	0x20000060
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	200000c4 	.word	0x200000c4
 8001a10:	2000002c 	.word	0x2000002c
 8001a14:	2000011c 	.word	0x2000011c

08001a18 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <SystemClock_Config+0xa8>)
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <SystemClock_Config+0xa8>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <SystemClock_Config+0xa8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <SystemClock_Config+0xac>)
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <SystemClock_Config+0xac>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <SystemClock_Config+0xac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a56:	2302      	movs	r3, #2
 8001a58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fe80 	bl	8000770 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a70:	230f      	movs	r3, #15
 8001a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f8ca 	bl	8000c24 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a90:	f7ff f9be 	bl	8000e10 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <SystemClock_Config+0xb0>)
 8001a98:	fba3 2302 	umull	r2, r3, r3, r2
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcbb 	bl	800041a <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7fe fcc5 	bl	8000434 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	f7fe fc96 	bl	80003e2 <HAL_NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3750      	adds	r7, #80	; 0x50
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <SPI1_Init>:
  }

}

void SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <SPI1_Init+0x58>)
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <SPI1_Init+0x5c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <SPI1_Init+0x58>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <SPI1_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <SPI1_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <SPI1_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <SPI1_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SPI1_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <SPI1_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <SPI1_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <SPI1_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SPI1_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <SPI1_Init+0x58>)
 8001b16:	220a      	movs	r2, #10
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi1);
 8001b1a:	4802      	ldr	r0, [pc, #8]	; (8001b24 <SPI1_Init+0x58>)
 8001b1c:	f7ff f994 	bl	8000e48 <HAL_SPI_Init>

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000174 	.word	0x20000174
 8001b28:	40013000 	.word	0x40013000

08001b2c <SPI2_Init>:

/* SPI2 init function */
void SPI2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <SPI2_Init+0x58>)
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <SPI2_Init+0x5c>)
 8001b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <SPI2_Init+0x58>)
 8001b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <SPI2_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <SPI2_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <SPI2_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <SPI2_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <SPI2_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <SPI2_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <SPI2_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLED;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SPI2_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SPI2_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <SPI2_Init+0x58>)
 8001b76:	220a      	movs	r2, #10
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi2);
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <SPI2_Init+0x58>)
 8001b7c:	f7ff f964 	bl	8000e48 <HAL_SPI_Init>

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000c4 	.word	0x200000c4
 8001b88:	40003800 	.word	0x40003800

08001b8c <SPI4_Init>:

/* SPI4 init function */
void SPI4_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <SPI4_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <SPI4_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <SPI4_Init+0x58>)
 8001b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b9c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <SPI4_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <SPI4_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <SPI4_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <SPI4_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <SPI4_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <SPI4_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <SPI4_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLED;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SPI4_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SPI4_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <SPI4_Init+0x58>)
 8001bd6:	220a      	movs	r2, #10
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi4);
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <SPI4_Init+0x58>)
 8001bdc:	f7ff f934 	bl	8000e48 <HAL_SPI_Init>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000011c 	.word	0x2000011c
 8001be8:	40013400 	.word	0x40013400

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bf2:	e003      	b.n	8001bfc <LoopCopyDataInit>

08001bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bfa:	3104      	adds	r1, #4

08001bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c04:	d3f6      	bcc.n	8001bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c08:	e002      	b.n	8001c10 <LoopFillZerobss>

08001c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c0c:	f842 3b04 	str.w	r3, [r2], #4

08001c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c14:	d3f9      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c16:	f000 f813 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f000 f8d1 	bl	8001dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fecd 	bl	80019bc <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c28:	08001e28 	.word	0x08001e28
  ldr  r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c30:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c34:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c38:	2000020c 	.word	0x2000020c

08001c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC_IRQHandler>
	...

08001c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <SystemInit+0x60>)
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <SystemInit+0x60>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <SystemInit+0x64>)
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <SystemInit+0x64>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <SystemInit+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <SystemInit+0x64>)
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <SystemInit+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <SystemInit+0x64>)
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <SystemInit+0x68>)
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c7c:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <SystemInit+0x64>)
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <SystemInit+0x64>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <SystemInit+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c8e:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SystemInit+0x60>)
 8001c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c94:	609a      	str	r2, [r3, #8]
#endif
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	24003010 	.word	0x24003010

08001cac <USART2_UART_Init>:
  }
}

/* USART2 init function */
void USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <USART2_UART_Init+0x48>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001cd8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cdc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART2_UART_Init+0x44>)
 8001ce6:	f7ff fbbb 	bl	8001460 <HAL_UART_Init>
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001cc 	.word	0x200001cc
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable USART1 clock */
  USARTX_CLK_ENABLE(); 
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_UART_MspInit+0x30>)
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_UART_MspInit+0x30>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_UART_MspInit+0x30>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
 8001d1c:	f000 f806 	bl	8001d2c <vcom_IoInit>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800

08001d2c <vcom_IoInit>:

void vcom_IoInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  USARTX_RX_GPIO_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <vcom_IoInit+0x8c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
    /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <vcom_IoInit+0x90>)
 8001d96:	f7fe fb69 	bl	800046c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <vcom_IoInit+0x90>)
 8001daa:	f7fe fb5f 	bl	800046c <HAL_GPIO_Init>
}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <__libc_init_array>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	4e0d      	ldr	r6, [pc, #52]	; (8001df8 <__libc_init_array+0x38>)
 8001dc4:	4c0d      	ldr	r4, [pc, #52]	; (8001dfc <__libc_init_array+0x3c>)
 8001dc6:	1ba4      	subs	r4, r4, r6
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	2500      	movs	r5, #0
 8001dcc:	42a5      	cmp	r5, r4
 8001dce:	d109      	bne.n	8001de4 <__libc_init_array+0x24>
 8001dd0:	4e0b      	ldr	r6, [pc, #44]	; (8001e00 <__libc_init_array+0x40>)
 8001dd2:	4c0c      	ldr	r4, [pc, #48]	; (8001e04 <__libc_init_array+0x44>)
 8001dd4:	f000 f818 	bl	8001e08 <_init>
 8001dd8:	1ba4      	subs	r4, r4, r6
 8001dda:	10a4      	asrs	r4, r4, #2
 8001ddc:	2500      	movs	r5, #0
 8001dde:	42a5      	cmp	r5, r4
 8001de0:	d105      	bne.n	8001dee <__libc_init_array+0x2e>
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001de8:	4798      	blx	r3
 8001dea:	3501      	adds	r5, #1
 8001dec:	e7ee      	b.n	8001dcc <__libc_init_array+0xc>
 8001dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001df2:	4798      	blx	r3
 8001df4:	3501      	adds	r5, #1
 8001df6:	e7f2      	b.n	8001dde <__libc_init_array+0x1e>
 8001df8:	08001e20 	.word	0x08001e20
 8001dfc:	08001e20 	.word	0x08001e20
 8001e00:	08001e20 	.word	0x08001e20
 8001e04:	08001e24 	.word	0x08001e24

08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr

08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
